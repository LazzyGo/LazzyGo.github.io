[{"categories":["javascript","android"],"content":"切换布局 \"ui\"; 界面1(); function 界面1(){ ui.layout( \u003cvertical\u003e \u003cbutton id=\"ok\" text=\"切换界面\"/\u003e \u003c/vertical\u003e ); ui.ok.click(function(){ 界面2(); }); } function 界面2(){ ui.layout( \u003cvertical\u003e \u003cbutton id=\"ok\" text=\"点一下回去\"/\u003e \u003c/vertical\u003e ); ui.ok.click(function(){ 界面1(); }); } ","date":"2022-03-08","objectID":"/autojs-switch-ui/:1:0","tags":["auto.js"],"title":"Autojs Switch Ui","uri":"/autojs-switch-ui/"},{"categories":["javascript"],"content":"学了JavaScript就同等于拥有跨平台应用开发的能力，前后端通吃，节省大量的学习成本 放在以前，Linux需要C++，Windows需要C#，Android需要Java，IOS需要Swift，Web前端需要JavaScript，服务器端又是一种抉择，不仅纠结语言，还纠结框架。 现在只需要JavaScript就能解决以上所有问题，解决学习成本和开发成本，还能顺带小程序也搞定。 ","date":"2022-03-06","objectID":"/choice-is-more-important-than-effort/:0:0","tags":["思考"],"title":"选择比努力更重要","uri":"/choice-is-more-important-than-effort/"},{"categories":["javascript"],"content":"对于个人来说服务器还那么重要吗 静态托管方案有 Netlify Github Pages 等等数不清的选择 要实现服务端功能呢 Heroku Docker Hub Deta 并且这些都是免费的，对于学生群体非常友好 ","date":"2022-03-06","objectID":"/choice-is-more-important-than-effort/:1:0","tags":["思考"],"title":"选择比努力更重要","uri":"/choice-is-more-important-than-effort/"},{"categories":["javascript"],"content":"还有一个重要的问题 如果只是自己玩玩，并非做专业的开发，还有必要这么深入的学习吗？ 框架，开源项目一大堆，随便搬过来整合一下就是一个新的东西。 既然并非从事开发工作，为什么不把时间多投入到生活当中？ 为什么要沉迷在这些“学习”当中？ 跑步🏃，爬山，骑行🚲，游泳🏊，打篮球🏀，这些不是更有助于身心健康吗？ ","date":"2022-03-06","objectID":"/choice-is-more-important-than-effort/:2:0","tags":["思考"],"title":"选择比努力更重要","uri":"/choice-is-more-important-than-effort/"},{"categories":["python","部署"],"content":"准备工作 注册heroku 在GitHub上创建一个repo 在heroku里创建一个Python app，并且关联到GitHub ","date":"2022-03-05","objectID":"/flask-in-heroku/:1:0","tags":["flask","heroku"],"title":"将flask应用部署到heroku","uri":"/flask-in-heroku/"},{"categories":["python","部署"],"content":"三个文件 main.py requirements.txt Procfile main.py from flask import Flask app = Flask(__name__) @app.route('/') def index(): return 'Hello World!' if __name__ == '__main__': app.run() requirements.txt Flask gunicorn Procfile web: gunicorn main:app ","date":"2022-03-05","objectID":"/flask-in-heroku/:2:0","tags":["flask","heroku"],"title":"将flask应用部署到heroku","uri":"/flask-in-heroku/"},{"categories":["python","部署"],"content":"提交 把这三个文件push到刚才创建的repo。 git init git remote add origin [repo] git add * git commit -m [msg] git push origin master ","date":"2022-03-05","objectID":"/flask-in-heroku/:3:0","tags":["flask","heroku"],"title":"将flask应用部署到heroku","uri":"/flask-in-heroku/"},{"categories":["python","部署"],"content":"设置 进heroku后台 在\"Manual deploy\"这里选择repo的分支，手动deploy一次。 后面将\"Automatic deploys\"设为\"enable\"就可以在每次push的时候自动deploy了。 找到\"Free Dynos\"这个开关，滑动到右边，设为\"free\"。 到这就设置完成了，点击\"open app\"查看，可以看到打开了一个新网页，上面显示着\"Hello World!\" ","date":"2022-03-05","objectID":"/flask-in-heroku/:4:0","tags":["flask","heroku"],"title":"将flask应用部署到heroku","uri":"/flask-in-heroku/"},{"categories":["编程","编程语言","软件"],"content":"前言 本篇幅仅仅是给自己制定的。首先，我很明确自己不是专业开发人员，也不想从事相关工作。 一切仅从解决问题的角度出发，即使代码写的再烂，只要能跑起来，完成它该做的事情就可以。 ","date":"2022-03-04","objectID":"/only/:1:0","tags":["思考"],"title":"“只用”原则","uri":"/only/"},{"categories":["编程","编程语言","软件"],"content":"静态博客 只用Hugo，原因（在保证功能够用的情况下）： 最快，没有之一 最易用 最简单 拒绝hexo，jekyll的原因 NPM版本与系统的兼容性 Gem，bundle，jekyll安装容易出错，一般只适用于最新版本的软件和系统 拒绝Pelican的原因 模板太难看，不要花时间去折腾开发模板，Hugo有现成的为什么不用 总结 不要花时间在开发主题上，直接用现成的 不要把时间浪费在安装上，也许只是一个小报错，少个依赖，安装就能解决，又或者是版本过低，但至少我在hugo上没遇到过任何这类问题 ","date":"2022-03-04","objectID":"/only/:2:0","tags":["思考"],"title":"“只用”原则","uri":"/only/"},{"categories":["编程","编程语言","软件"],"content":"编程语言以及框架等相关的选择 我首先要明确一点，我不是专业开发人员，我不希望从事程序员行业，仅作为爱好，也不想花太多时间钻研，尽可能做出最简单的选择，而不是选择性能最好，也不是最受欢迎。 一般情况下，只用这三门脚本语言 Python，相对简单 JavaScript，上天入地，无所不能 Shell，Linux必备 不打算学 Java，没有使用Java的理由 C#，没有桌面软件、游戏开发的需求 C++，根本不知道C++是干嘛的 Ruby, Perl, R，我的评价是：不如Python jQuery，已经不再流行 设计模式，面向对象编程是什么？我只面向信仰编程 Django，不适合我的开发需求 尽可能少用或者不用的 PHP，PHP不适合我 Go，虽然这个网站名字叫做“Go博客”，但是我并不打算深入学习Go，主要是它的特性，我没地方用，没有相关需求，Go可以用来提醒我，“编程可以是信仰” 总结：要在折腾的时候少折腾。 ","date":"2022-03-04","objectID":"/only/:3:0","tags":["思考"],"title":"“只用”原则","uri":"/only/"},{"categories":["编程","编程语言","软件"],"content":"编辑器、文档、软件的选择 日常使用 Vim，编辑器之神 VSCode，备用 不打算用的 word, excel, ppt，世界上那么多人连office都不会安装还不是照样活得好好的 Adobe全家桶，我连PS抠图都抠不好，这辈子是不可能碰设计类的软件了 Autodesk全家桶 JetBrains全家桶 Android Studio, Visual Studio，没有相关开发需求，如果有，可以用electron和h5能省下很多学习成本 ","date":"2022-03-04","objectID":"/only/:4:0","tags":["思考"],"title":"“只用”原则","uri":"/only/"},{"categories":["编程","编程语言","软件"],"content":"操作系统的选择 桌面操作系统只用： Ubuntu，简单易用 Manjaro, 滚动升级，pacman很方便 Windows，简单易用 服务器只用： Ubuntu Windows 相关说明： Kali，kali只是工具集，不要把它当作操作系统 套壳美化的Linux系统，没必要，不如自己制定 OSX，苹果的操作系统也许会挺流畅，但我不会用 IOS，很多我平时需要用的软件在IOS平台都没有 CentOS \u0026 Fedora，用不习惯，不要因为大家都用CentOS就跟着去用 我并没有歧视任何一门语言和工具，上述任何工具都有它强大的地方，本章一切仅仅是针对我自己的需求来选择。 写下此篇，只希望以后能提醒到我，要在折腾的时候少折腾，不求什么都会，一知半解即可，轻松和开心最重要😊！ ","date":"2022-03-04","objectID":"/only/:5:0","tags":["思考"],"title":"“只用”原则","uri":"/only/"},{"categories":["Docs"],"content":"python python3-cookbook: https://python3-cookbook.readthedocs.io/zh_CN/ ","date":"2022-03-03","objectID":"/sites/:1:0","tags":["site"],"title":"网站收藏","uri":"/sites/"},{"categories":["Docs"],"content":"文档生成器/文档主题相关 docusaurus: https://docusaurus.io/zh-CN docute: https://docute.org/zh ","date":"2022-03-03","objectID":"/sites/:2:0","tags":["site"],"title":"网站收藏","uri":"/sites/"},{"categories":["Docs"],"content":"图片相关 全平台图标生成: https://realfavicongenerator.net/ ","date":"2022-03-03","objectID":"/sites/:3:0","tags":["site"],"title":"网站收藏","uri":"/sites/"},{"categories":["Docs"],"content":"Web Nuxt.js: https://nuxtjs.org/ Next.js: https://nextjs.org/ Manifests Generator: https://tomitm.github.io/appmanifest/ PWA框架PWABuilder(microsoft): https://www.pwabuilder.com/ PWA框架Polymer: https://polymer-library.polymer-project.org PWA框架outweb: https://outweb.io/ axios: https://www.axios-http.cn/docs/intro ","date":"2022-03-03","objectID":"/sites/:4:0","tags":["site"],"title":"网站收藏","uri":"/sites/"},{"categories":["Docs"],"content":"Server nginx: https://www.nginx.cn/doc/ Flask: https://dormousehole.readthedocs.io/en/latest/quickstart.html certbot: https://certbot.eff.org/ candy: https://caddyserver.com/docs/getting-started ","date":"2022-03-03","objectID":"/sites/:5:0","tags":["site"],"title":"网站收藏","uri":"/sites/"},{"categories":["Docs"],"content":"免费资源 MongoDB: https://www.mongodb.com/zh-cn/cloud Vercel: https://vercel.com/ Netlify: https://www.netlify.com/ Heroku: https://heroku.com/ Deta: https://www.deta.sh/ ","date":"2022-03-03","objectID":"/sites/:6:0","tags":["site"],"title":"网站收藏","uri":"/sites/"},{"categories":["Docs"],"content":"自动化 airtest: https://airtest.netease.com/ ","date":"2022-03-03","objectID":"/sites/:7:0","tags":["site"],"title":"网站收藏","uri":"/sites/"},{"categories":null,"content":"简洁，高效 ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"}]