<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go博客</title>
        <link>http://localhost:1313/</link>
        <description>学习Go语言，搭建Hugo博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lazzygo@outlook.com (Go博客)</managingEditor>
            <webMaster>lazzygo@outlook.com (Go博客)</webMaster><lastBuildDate>Mon, 21 Mar 2022 09:13:05 &#43;0000</lastBuildDate>
            <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>交易所api</title>
    <link>http://localhost:1313/exapi/</link>
    <pubDate>Mon, 21 Mar 2022 09:13:05 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/exapi/</guid>
    <description><![CDATA[bybit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import requests import json r=requests.get(&#34;https://api-testnet.bybit.com/public/linear/kline?symbol=BTCUSDT&amp;interval=1&amp;limit=2&amp;from=1581231260&#34;) print(json.dumps(json.loads(r.text)[&#39;result&#39;],indent=4,sort_keys=True)) kline=&#34;https://api-testnet.bybit.com/public/linear/kline&#34; params={ &#39;symbol&#39;:&#39;BTCUSDT&#39;, &#39;interval&#39;:1, &#39;limit&#39;:2, &#39;from&#39;:1581231260 } r1=requests.get(kline,params=params) data=json.loads(r1.text) data=json.dumps(data[&#39;result&#39;],indent=4,sort_keys=True) print(data)   binance docs: https://binance-docs.github.io/apidocs/futures/en
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import json,requests def test(url,paramas): r=requests.get(url,params=params).text data=json.dumps(json.loads(r),indent=4,sort_keys=True) print(data) return data url=&#34;https://fapi.binance.com/fapi/v1/time&#34; params={} r=test(url,params) #r=requests.get(&#34;https://fapi.binance.com/fapi/v1/time&#34;) #print(r.]]></description>
</item><item>
    <title>在vim下写Python</title>
    <link>http://localhost:1313/vim/</link>
    <pubDate>Fri, 11 Mar 2022 13:17:49 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/vim/</guid>
    <description><![CDATA[需求  代码高亮 一键运行 关闭代码提示的preview 代码自动/手动补全 代码块  注意 termux环境里，Python代码补全需要vim-python这个包，默认情况下会安装有，但有时候需要手动安装。]]></description>
</item><item>
    <title>练习与复习</title>
    <link>http://localhost:1313/practice-and-review/</link>
    <pubDate>Thu, 10 Mar 2022 09:21:41 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/practice-and-review/</guid>
    <description><![CDATA[python  sqlite3 https://docs.python.org/2/library/sqlite3.html fastapi https://fastapi.tiangolo.com/zh/tutorial/first-steps/ asyncio https://docs.python.org/zh-cn/3/library/asyncio-task.html#coroutine python https://www.runoob.com/python3/python3-built-in-functions.html  linux  vim https://yianwillis.github.io/vimcdoc/doc/help.html shell https://www.runoob.com/linux/linux-shell.html  其他  设计模式 https://refactoring.guru/design-patterns sqlite https://www.runoob.com/sqlite/sqlite-functions.html sql语句总汇 https://www.runoob.com/sql/sql-function.html pybit https://bybit-exchange.github.io/docs/zh-cn/linear/#t-key  ]]></description>
</item><item>
    <title>Fastapi用和不用await的区别</title>
    <link>http://localhost:1313/fastapi-await/</link>
    <pubDate>Wed, 09 Mar 2022 05:50:17 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/fastapi-await/</guid>
    <description><![CDATA[测试代码 用100个并发请求分别测试下面4个接口：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  from fastapi import APIRouter import time import asyncio router = APIRouter() @router.get(&#34;/a&#34;) async def a(): time.sleep(1) return {&#34;message&#34;: &#34;异步模式，但是同步执行sleep函数，执行过程是串行的&#34;} @router.get(&#34;/b&#34;) async def b(): loop = asyncio.get_event_loop() await loop.run_in_executor(None, time.sleep, 1) return {&#34;message&#34;: &#34;线程池中运行sleep函数&#34;} @router.get(&#34;/c&#34;) async def c(): await asyncio.]]></description>
</item><item>
    <title>Python时间</title>
    <link>http://localhost:1313/python-time/</link>
    <pubDate>Wed, 09 Mar 2022 03:11:16 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/python-time/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11  &gt;&gt;&gt; time.strftime(&#39;%X&#39;) &#39;11:09:41&#39; &gt;&gt;&gt; time.strftime(&#39;%x&#39;) &#39;03/09/22&#39; &gt;&gt;&gt; time.strftime(&#39;%d&#39;) &#39;09&#39; &gt;&gt;&gt; time.strftime(&#39;%y&#39;) &#39;22&#39; &gt;&gt;&gt; time.strftime(&#39;%m&#39;) &#39;03&#39; &gt;&gt;&gt;   ]]></description>
</item><item>
    <title>Autojs销毁UI</title>
    <link>http://localhost:1313/autojs-finish-ui/</link>
    <pubDate>Tue, 08 Mar 2022 10:03:22 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/autojs-finish-ui/</guid>
    <description><![CDATA[设置两秒后销毁UI 1 2 3 4 5 6 7 8 9 10 11 12 13 14  &#34;ui&#34;; $ui.layout( &lt;vertical&gt; &lt;appbar&gt; &lt;toolbar title=&#34;kkk&#34; /&gt; &lt;/appbar&gt; &lt;button text=&#34;j&#34; /&gt; &lt;/vertical&gt; ) setTimeout(()=&gt;{ ui.finish()} ,2000)   ]]></description>
</item><item>
    <title>Bootstrap &amp; CSS笔记</title>
    <link>http://localhost:1313/bootstrap-css/</link>
    <pubDate>Tue, 08 Mar 2022 06:20:10 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/bootstrap-css/</guid>
    <description><![CDATA[去除输入框阴影 1 2 3 4  input:focus{ border: none !important; box-shadow: none !important; }   ]]></description>
</item><item>
    <title>Auto.js切换UI布局</title>
    <link>http://localhost:1313/autojs-switch-ui/</link>
    <pubDate>Tue, 08 Mar 2022 04:27:46 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/autojs-switch-ui/</guid>
    <description><![CDATA[切换布局 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  &#34;ui&#34;; 界面1(); function 界面1(){ ui.layout( &lt;vertical&gt; &lt;button id=&#34;ok&#34; text=&#34;切换界面&#34;/&gt; &lt;/vertical&gt; ); ui.ok.click(function(){ 界面2(); }); } function 界面2(){ ui.layout( &lt;vertical&gt; &lt;button id=&#34;ok&#34; text=&#34;点一下回去&#34;/&gt; &lt;/vertical&gt; ); ui.ok.click(function(){ 界面1(); }); }   ]]></description>
</item><item>
    <title>选择比努力更重要</title>
    <link>http://localhost:1313/choice-is-more-important-than-effort/</link>
    <pubDate>Sun, 06 Mar 2022 02:13:52 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/choice-is-more-important-than-effort/</guid>
    <description><![CDATA[学了JavaScript就同等于拥有跨平台应用开发的能力，前后端通吃，节省大量的学习成本
 放在以前，Linux需要C++，Windows需要C#，Android需要Java，IOS需要Swift，Web前端需要JavaScript，服务器端又是一种抉择，不仅纠结语言，还纠结框架。
  现在只需要JavaScript就能解决以上所有问题，解决学习成本和开发成本，还能顺带小程序也搞定。
 对于个人来说服务器还那么重要吗 静态托管方案有
 Netlify Github Pages 等等数不清的选择  要实现服务端功能呢
 Heroku Docker Hub Deta  并且这些都是免费的，对于学生群体非常友好
还有一个重要的问题 如果只是自己玩玩，并非做专业的开发，还有必要这么深入的学习吗？
框架，开源项目一大堆，随便搬过来整合一下就是一个新的东西。
既然并非从事开发工作，为什么不把时间多投入到生活当中？
为什么要沉迷在这些“学习”当中？
跑步🏃，爬山，骑行🚲，游泳🏊，打篮球🏀，这些不是更有助于身心健康吗？]]></description>
</item><item>
    <title>将flask应用部署到heroku</title>
    <link>http://localhost:1313/flask-in-heroku/</link>
    <pubDate>Sat, 05 Mar 2022 09:35:28 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://localhost:1313/flask-in-heroku/</guid>
    <description><![CDATA[准备工作  注册heroku 在GitHub上创建一个repo 在heroku里创建一个Python app，并且关联到GitHub  三个文件  main.py requirements.txt Procfile  main.py
1 2 3 4 5 6 7 8 9 10  from flask import Flask app = Flask(__name__) @app.route(&#39;/&#39;) def index(): return &#39;Hello World!&#39; if __name__ == &#39;__main__&#39;: app.run()   requirements.txt
1 2  Flask gunicorn   Procfile
1  web: gunicorn main:app   提交 把这三个文件push到刚才创建的repo。
1 2 3 4 5  git init git remote add origin [repo] git add * git commit -m [msg] git push origin master   设置 进heroku后台]]></description>
</item></channel>
</rss>
